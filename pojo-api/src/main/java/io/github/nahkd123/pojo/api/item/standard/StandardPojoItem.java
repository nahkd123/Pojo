package io.github.nahkd123.pojo.api.item.standard;

import java.util.ArrayList;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import io.github.nahkd123.pojo.api.internal.PojoInternal;
import io.github.nahkd123.pojo.api.item.PojoItem;
import io.github.nahkd123.pojo.api.item.standard.component.Component;
import io.github.nahkd123.pojo.api.item.standard.component.ComponentDataHolder;
import io.github.nahkd123.pojo.api.item.standard.component.ComponentsFactory;
import io.github.nahkd123.pojo.api.item.standard.component.SaveableComponent;
import io.github.nahkd123.pojo.api.registry.UserDefinedId;
import io.github.nahkd123.pojo.api.utils.lore.LoreSorter;

public class StandardPojoItem implements PojoItem {
	private List<UserDefinedId> loreSections;
	private UserDefinedId id;
	private List<Component<?>> components;

	public StandardPojoItem(List<UserDefinedId> loreSections, UserDefinedId id, List<Component<?>> components) {
		this.loreSections = loreSections;
		this.id = id;
		this.components = components;
	}

	public static StandardPojoItem loadFromConfig(List<UserDefinedId> loreSections, UserDefinedId id, ConfigurationSection config) {
		ConfigurationSection componentsConfig = config.getConfigurationSection("components");
		List<Component<?>> components = new ArrayList<>();

		if (componentsConfig != null) {
			for (String name : componentsConfig.getKeys(false)) {
				ConfigurationSection component = componentsConfig.getConfigurationSection(name);
				if (!component.contains("type")) {
					PojoInternal.instance().getPlugin().getLogger()
						.warning("Items: " + id + ": Component '" + name + "' does not have 'type' field");
					continue;
				}

				NamespacedKey type = NamespacedKey.fromString(
					component.getString("type"),
					PojoInternal.instance().getPlugin());

				ComponentsFactory<?> factory = ComponentsFactory.getAllFactories().get(type);
				if (factory == null) {
					PojoInternal.instance().getPlugin().getLogger()
						.warning("Items: " + id + ": Component with type '" + type + "' is not registered!");
					continue;
				}

				Component<?> c = factory.createFromConfig(component);
				components.add(c);
			}
		}

		return new StandardPojoItem(loreSections, id, components);
	}

	public boolean saveToConfig(ConfigurationSection config) {
		ConfigurationSection componentsConfig = config.createSection("components");
		int currentIndex = 0;

		for (Component<?> component : components) {
			if (!(component instanceof SaveableComponent<?> saveable)) return false;
			ConfigurationSection componentConfig = componentsConfig.createSection("Autogenerated Name " + currentIndex);
			componentConfig.set("type", component.getTypeId().toString());
			saveable.saveComponentTo(componentConfig);
			currentIndex++;
		}

		return true;
	}

	@Override
	public UserDefinedId getId() { return id; }

	public List<Component<?>> getComponents() { return components; }

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public ItemStack createNew(boolean displayMode) {
		ComponentDataHolder dataHolder = ComponentDataHolder.newHolder();

		// 1. Initialize
		for (Component component : components) {
			Object data = component.createNewData();
			dataHolder.addRaw(component, data);
		}

		// 2. Manipulate
		for (Component component : components) component.applyToOtherComponent(dataHolder.get(component), dataHolder);

		// 3. Display
		Material mat = Material.STONE;
		String name = null;
		LoreSorter lore = new LoreSorter(loreSections);

		for (Component component : components) {
			Object obj = dataHolder.get(component);
			mat = component.applyMaterial(obj, mat, displayMode);
			name = component.applyName(obj, name, displayMode);
			component.applyLore(obj, lore, displayMode);
		}

		List<String> loreList = lore.build();
		ItemStack stack = new ItemStack(mat);
		ItemMeta meta = stack.getItemMeta();
		PojoItem.super.updateMeta(meta, displayMode);

		if (name != null) meta.setDisplayName(name);
		if (loreList.size() > 0) meta.setLore(loreList);

		// 4. Post display & store data
		for (Component component : components) component.applyPostDisplay(dataHolder.get(component), meta, displayMode);

		for (Component component : components) {
			Object obj = dataHolder.get(component);
			component.storeDataTo(meta.getPersistentDataContainer(), obj);
		}

		stack.setItemMeta(meta);
		return stack;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Override
	public ItemMeta updateMeta(ItemMeta source, boolean displayMode) {
		source = PojoItem.super.updateMeta(source, displayMode);

		// 1. Load and manipulate
		ComponentDataHolder dataHolder = loadDataFrom(source, true);

		// 2. Display
		String name = null;
		LoreSorter lore = new LoreSorter(loreSections);

		for (Component component : components) {
			Object data = dataHolder.get(component);
			name = component.applyName(data, name, displayMode);
			component.applyLore(data, lore, displayMode);
		}

		List<String> loreList = lore.build();
		if (name != null) source.setLocalizedName(name);
		if (loreList.size() > 0) source.setLore(loreList);

		// 3. Post display (storing data is not included atm)
		for (Component component : components)
			component.applyPostDisplay(dataHolder.get(component), source, displayMode);
		return source;
	}

	/**
	 * <p>
	 * Load all component data from {@link ItemMeta}.
	 * </p>
	 * 
	 * @param meta       The meta to load.
	 * @param manipulate {@code true} will allows components to manipulate others,
	 *                   like applying to computed stats for example.
	 * @return Loaded component data.
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public ComponentDataHolder loadDataFrom(ItemMeta meta, boolean manipulate) {
		ComponentDataHolder dataHolder = ComponentDataHolder.newHolder();

		for (Component component : components) {
			Object data = component.loadDataFrom(meta.getPersistentDataContainer());
			dataHolder.addRaw(component, data);
		}

		for (Component component : components) component.applyToOtherComponent(dataHolder.get(component), dataHolder);
		return dataHolder;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void saveDataTo(ItemMeta meta, ComponentDataHolder dataHolder) {
		// 1. Display
		String name = null;
		LoreSorter lore = new LoreSorter(loreSections);
		boolean displayMode = PojoItem.isDisplayMode(meta);

		for (Component component : components) {
			Object data = dataHolder.get(component);
			name = component.applyName(data, name, displayMode);
			component.applyLore(data, lore, displayMode);
		}

		List<String> loreList = lore.build();
		if (name != null) meta.setLocalizedName(name);
		if (loreList.size() > 0) meta.setLore(loreList);

		// 2. Post display & store data
		for (Component component : components)
			component.applyPostDisplay(dataHolder.get(component), meta, displayMode);

		for (Component component : components) {
			Object obj = dataHolder.get(component);
			component.storeDataTo(meta.getPersistentDataContainer(), obj);
		}
	}
}
